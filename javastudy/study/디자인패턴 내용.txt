디자인패턴 : 모듈간의 관계 및 인터페이스를 설계할 때 참조할 수 있는 전형적인 해결방식 또는 예제이다.
	    생성패턴, 구조패턴, 행위패턴으로 나뉜다.

생성패턴 : 클래스나 객체의 생성과 참조 과정을 정의하는 패턴이다.
     종류 : 추상 팩토리, 빌더, 팩토리 메소드, 프로토타입, 싱글톤
* 싱글톤 : 하나의 객체를 생성하면 생성된 객체를 어디서든 참조할 수 있지만,
	여러 프로세스가 동시에 참조 할 수 없음.
	클래스 내에서 인스턴스가 하나뿐임을 보장하며, 불필요한 메모리 낭비를 최소화 할 수 있음.

구조패턴 : 구조가 복잡한 시스템을 개발하기 쉽도록 클래스나 객체들을 조합하여 더 큰 구조로
	 만드는 패턴이다.
* 어댑터 : 호환성이 없는 클래스들의 인터페이스를 다른 클래스가 이용할 수 있도록 변환해주는 패턴이다.

행위패턴 : 클래스나 객체들이 서로 상호작용하는 방법이나 책임 분배 방법을 정의하는 패턴이다.
* 옵서버 : 한 객체의 상태가 변화하면 객체에 상속되어 있는 다른 객체들에게 변화된 상태를 전달
	 하는 패턴이다. 주로 분산된 시스템 간에 이벤트를 생성, 발행하고, 이를 수신해야 할때
	 이용된다.